{"version":3,"sources":["status.js","util.js","index.js"],"names":["ensureStatusProxy","expect","s","PENDING","FULFILLED","REJECTED","isPending","isFulfilled","isRejected","isResolved","isFunction","f","isObject","o","runAsync","fn","setTimeout","getDeferThrowError","error","promise","result","timer","handler","setupDeferThrow","teardownDeferThrow","flushPendingHandlers","status","status_","handlers","pendingHandlers_","slice","value","value_","forEach","Promise","undefined","resolve_","bind","reject_","TypeError","constructor","then","once","callerProxy","val","call","fulfill_","e","fillWith_","onFulfilled","onRejected","handleFulfillProxy","resolve","reject","handleRejectProxy","err","PromiseConstructor","push","defer","pending"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const ensureStatusProxy = expect => s => s === expect\n\nexport const PENDING = 'pending'\nexport const FULFILLED = 'fulfilled'\nexport const REJECTED = 'rejected'\n\nexport const isPending = ensureStatusProxy(PENDING)\nexport const isFulfilled = ensureStatusProxy(FULFILLED)\nexport const isRejected = ensureStatusProxy(REJECTED)\n\nexport const isResolved = s => isFulfilled(s) || isRejected(s)\n","import { isFulfilled, isRejected, isResolved } from './status'\n\nexport const isFunction = f => f && typeof f === 'function'\nexport const isObject = o => o && typeof o === 'object'\nexport const runAsync = fn => {\n  setTimeout(fn, 0)\n}\n\nconst getDeferThrowError = (error, promise) => {\n  const result = {\n    timer: setTimeout(() => {\n      result.handler(error)\n    }),\n    // Reset when unit test/...\n    handler: error => { throw error },\n    error\n  }\n\n  return result\n}\n\nexport const setupDeferThrow = promise => {\n  // Only for `extend`\n  if (process.env.IMPL === 'extend') {\n    if (promise) {\n      const status = promise.status_\n      // No rejected-handler\n      if (promise.pendingHandlers_.length === 0) {\n        // Throw when it is rejected\n        if (isRejected(status)) {\n          const value = promise.value_\n          // Defer throw\n          promise.deferThrowErr_ = getDeferThrowError(value, promise)\n          return true\n        }\n      }\n    }\n  }\n\n  return false\n}\n\nexport const teardownDeferThrow = promise => {\n  // Only for `extend`\n  if (process.env.IMPL === 'extend') {\n    if (promise) {\n      if (promise.deferThrowErr_) {\n        clearTimeout(promise.deferThrowErr_.timer)\n        promise.deferThrowErr_ = undefined\n      }\n    }\n  }\n}\n\nexport const flushPendingHandlers = promise => {\n  const status = promise.status_\n  if (!isResolved(status)) return\n\n  const handlers = promise.pendingHandlers_.slice(0)\n  const value = promise.value_\n\n  // Return when defer exception setup\n  if (setupDeferThrow(promise)) return\n\n  handlers.forEach(f => {\n    let handler\n\n    if (isFulfilled(status)) handler = f[0]\n    else if (isRejected(status)) handler = f[1]\n\n    if (handler) runAsync(() => handler(value))\n  })\n}\n","/*!\n *  A Promises/A+ implememt by jzendo\n *  - Specification: https://promisesaplus.com/\n */\n\nimport {\n  FULFILLED,\n  PENDING,\n  REJECTED,\n  isFulfilled,\n  isPending,\n  isRejected,\n  isResolved\n} from './status'\nimport {\n  flushPendingHandlers,\n  isFunction,\n  isObject,\n  runAsync,\n  teardownDeferThrow\n} from './util'\n\n/**\n *  @class Promise\n */\nclass Promise {\n  constructor (fn) {\n    this.status_ = PENDING\n    this.value_ = undefined\n    this.pendingHandlers_ = []\n\n    fn(this.resolve_.bind(this), this.reject_.bind(this))\n  }\n\n  resolve_ (value) {\n    if (isResolved(this.status_)) return\n\n    if (value === this) {\n      throw new TypeError('Chaining cycle detected for promise')\n    } else if (value instanceof this.constructor) {\n      value.then(this.resolve_.bind(this), this.reject_.bind(this))\n    } else if (isFunction(value) || isObject(value)) {\n      let once = false\n\n      try {\n        const { then } = value\n\n        if (isFunction(then)) {\n          const callerProxy = fn => val => {\n            if (!once) {\n              fn(val)\n              once = true\n            }\n          }\n\n          then.call(\n            value,\n            callerProxy(this.resolve_.bind(this)),\n            callerProxy(this.reject_.bind(this))\n          )\n        } else {\n          this.fulfill_(value)\n        }\n      } catch (e) {\n        // https://promisesaplus.com/#point-55\n        // https://promisesaplus.com/#point-59\n        if (!once) this.reject_(e)\n      }\n    } else {\n      this.fulfill_(value)\n    }\n  }\n\n  fulfill_ (value) {\n    this.fillWith_(value, FULFILLED)\n  }\n\n  reject_ (value) {\n    this.fillWith_(value, REJECTED)\n  }\n\n  fillWith_ (value, status) {\n    if (isResolved(this.status_)) return\n\n    this.status_ = status\n    this.value_ = value\n\n    flushPendingHandlers(this)\n  }\n\n  then (onFulfilled, onRejected) {\n    teardownDeferThrow(this)\n\n    const { status_, value_ } = this\n\n    const handleFulfillProxy = (resolve, reject) => val => {\n      try {\n        if (isFunction(onFulfilled)) resolve(onFulfilled(val))\n        else resolve(val)\n      } catch (e) {\n        reject(e)\n      }\n    }\n\n    const handleRejectProxy = (resolve, reject) => err => {\n      try {\n        if (isFunction(onRejected)) resolve(onRejected(err))\n        else {\n          reject(err)\n        }\n      } catch (e) {\n        reject(e)\n      }\n    }\n\n    // Refer to Promise constructor\n    const PromiseConstructor = this.constructor\n\n    // Status: pending\n    if (isPending(status_)) {\n      return new PromiseConstructor((resolve, reject) => {\n        this.pendingHandlers_.push([\n          handleFulfillProxy(resolve, reject),\n          handleRejectProxy(resolve, reject)\n        ])\n      })\n    }\n\n    // Status: fulfilled\n    if (isFulfilled(status_)) {\n      return new PromiseConstructor((resolve, reject) =>\n        // NOTE: onFulfilled should be called async mode\n        runAsync(() => {\n          handleFulfillProxy(resolve, reject)(value_)\n        })\n      )\n    }\n\n    // Status: rejected\n    if (isRejected(status_)) {\n      return new PromiseConstructor((resolve, reject) =>\n        // NOTE: onRejected should be called async mode\n        runAsync(() => {\n          handleRejectProxy(resolve, reject)(value_)\n        })\n      )\n    }\n\n    // throw new Error('invalid status')\n  }\n}\n\nexport default Promise\n\n// Generate `defer` util\nexport const defer = () => {\n  const pending = {}\n\n  pending.promise = new Promise((resolve, reject) => {\n    pending.resolve = resolve\n    pending.reject = reject\n  })\n\n  return pending\n}\n"]}