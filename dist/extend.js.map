{"version":3,"sources":["status.js","util.js","index.js","extend.js"],"names":["ensureStatusProxy","expect","s","PENDING","FULFILLED","REJECTED","isPending","isFulfilled","isRejected","isResolved","isFunction","f","isObject","o","runAsync","fn","setTimeout","getDeferThrowError","error","promise","result","timer","handler","setupDeferThrow","status","status_","pendingHandlers_","length","value","value_","deferThrowErr_","teardownDeferThrow","clearTimeout","undefined","flushPendingHandlers","handlers","slice","forEach","Promise","resolve_","bind","reject_","TypeError","constructor","then","once","callerProxy","val","call","fulfill_","e","fillWith_","onFulfilled","onRejected","handleFulfillProxy","resolve","reject","handleRejectProxy","err","PromiseConstructor","push","defer","pending","checkIterable","iterable","Array","isArray","Error","PromiseBase","v","count","resolvedCount","values","checkResolveProxy","idx","item"],"mappings":"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","file":"extend.js","sourceRoot":"../src","sourcesContent":["const ensureStatusProxy = expect => s => s === expect\n\nexport const PENDING = 'pending'\nexport const FULFILLED = 'fulfilled'\nexport const REJECTED = 'rejected'\n\nexport const isPending = ensureStatusProxy(PENDING)\nexport const isFulfilled = ensureStatusProxy(FULFILLED)\nexport const isRejected = ensureStatusProxy(REJECTED)\n\nexport const isResolved = s => isFulfilled(s) || isRejected(s)\n","import { isFulfilled, isRejected, isResolved } from './status'\n\nexport const isFunction = f => f && typeof f === 'function'\nexport const isObject = o => o && typeof o === 'object'\nexport const runAsync = fn => {\n  setTimeout(fn, 0)\n}\n\nconst getDeferThrowError = (error, promise) => {\n  const result = {\n    timer: setTimeout(() => {\n      result.handler(error)\n    }),\n    // Reset when unit test/...\n    handler: error => { throw error },\n    error\n  }\n\n  return result\n}\n\nexport const setupDeferThrow = promise => {\n  // Only for `extend`\n  if (process.env.IMPL === 'extend') {\n    if (promise) {\n      const status = promise.status_\n      // No rejected-handler\n      if (promise.pendingHandlers_.length === 0) {\n        // Throw when it is rejected\n        if (isRejected(status)) {\n          const value = promise.value_\n          // Defer throw\n          promise.deferThrowErr_ = getDeferThrowError(value, promise)\n          return true\n        }\n      }\n    }\n  }\n\n  return false\n}\n\nexport const teardownDeferThrow = promise => {\n  // Only for `extend`\n  if (process.env.IMPL === 'extend') {\n    if (promise) {\n      if (promise.deferThrowErr_) {\n        clearTimeout(promise.deferThrowErr_.timer)\n        promise.deferThrowErr_ = undefined\n      }\n    }\n  }\n}\n\nexport const flushPendingHandlers = promise => {\n  const status = promise.status_\n  if (!isResolved(status)) return\n\n  const handlers = promise.pendingHandlers_.slice(0)\n  const value = promise.value_\n\n  // Return when defer exception setup\n  if (setupDeferThrow(promise)) return\n\n  handlers.forEach(f => {\n    let handler\n\n    if (isFulfilled(status)) handler = f[0]\n    else if (isRejected(status)) handler = f[1]\n\n    if (handler) runAsync(() => handler(value))\n  })\n}\n","/*!\n *  A Promises/A+ implememt by jzendo\n *  - Specification: https://promisesaplus.com/\n */\n\nimport {\n  FULFILLED,\n  PENDING,\n  REJECTED,\n  isFulfilled,\n  isPending,\n  isRejected,\n  isResolved\n} from './status'\nimport {\n  flushPendingHandlers,\n  isFunction,\n  isObject,\n  runAsync,\n  teardownDeferThrow\n} from './util'\n\n/**\n *  @class Promise\n */\nclass Promise {\n  constructor (fn) {\n    this.status_ = PENDING\n    this.value_ = undefined\n    this.pendingHandlers_ = []\n\n    fn(this.resolve_.bind(this), this.reject_.bind(this))\n  }\n\n  resolve_ (value) {\n    if (isResolved(this.status_)) return\n\n    if (value === this) {\n      throw new TypeError('Chaining cycle detected for promise')\n    } else if (value instanceof this.constructor) {\n      value.then(this.resolve_.bind(this), this.reject_.bind(this))\n    } else if (isFunction(value) || isObject(value)) {\n      let once = false\n\n      try {\n        const { then } = value\n\n        if (isFunction(then)) {\n          const callerProxy = fn => val => {\n            if (!once) {\n              fn(val)\n              once = true\n            }\n          }\n\n          then.call(\n            value,\n            callerProxy(this.resolve_.bind(this)),\n            callerProxy(this.reject_.bind(this))\n          )\n        } else {\n          this.fulfill_(value)\n        }\n      } catch (e) {\n        // https://promisesaplus.com/#point-55\n        // https://promisesaplus.com/#point-59\n        if (!once) this.reject_(e)\n      }\n    } else {\n      this.fulfill_(value)\n    }\n  }\n\n  fulfill_ (value) {\n    this.fillWith_(value, FULFILLED)\n  }\n\n  reject_ (value) {\n    this.fillWith_(value, REJECTED)\n  }\n\n  fillWith_ (value, status) {\n    if (isResolved(this.status_)) return\n\n    this.status_ = status\n    this.value_ = value\n\n    flushPendingHandlers(this)\n  }\n\n  then (onFulfilled, onRejected) {\n    teardownDeferThrow(this)\n\n    const { status_, value_ } = this\n\n    const handleFulfillProxy = (resolve, reject) => val => {\n      try {\n        if (isFunction(onFulfilled)) resolve(onFulfilled(val))\n        else resolve(val)\n      } catch (e) {\n        reject(e)\n      }\n    }\n\n    const handleRejectProxy = (resolve, reject) => err => {\n      try {\n        if (isFunction(onRejected)) resolve(onRejected(err))\n        else {\n          reject(err)\n        }\n      } catch (e) {\n        reject(e)\n      }\n    }\n\n    // Refer to Promise constructor\n    const PromiseConstructor = this.constructor\n\n    // Status: pending\n    if (isPending(status_)) {\n      return new PromiseConstructor((resolve, reject) => {\n        this.pendingHandlers_.push([\n          handleFulfillProxy(resolve, reject),\n          handleRejectProxy(resolve, reject)\n        ])\n      })\n    }\n\n    // Status: fulfilled\n    if (isFulfilled(status_)) {\n      return new PromiseConstructor((resolve, reject) =>\n        // NOTE: onFulfilled should be called async mode\n        runAsync(() => {\n          handleFulfillProxy(resolve, reject)(value_)\n        })\n      )\n    }\n\n    // Status: rejected\n    if (isRejected(status_)) {\n      return new PromiseConstructor((resolve, reject) =>\n        // NOTE: onRejected should be called async mode\n        runAsync(() => {\n          handleRejectProxy(resolve, reject)(value_)\n        })\n      )\n    }\n\n    // throw new Error('invalid status')\n  }\n}\n\nexport default Promise\n\n// Generate `defer` util\nexport const defer = () => {\n  const pending = {}\n\n  pending.promise = new Promise((resolve, reject) => {\n    pending.resolve = resolve\n    pending.reject = reject\n  })\n\n  return pending\n}\n","import PromiseBase from './index'\n// import { teardownDeferThrow } from './util'\n\nfunction checkIterable (iterable) {\n  // TODO: check iterable\n  if (!Array.isArray(iterable)) {\n    throw new Error('The first argument is not iterable (cannot read property Symbol(Symbol.iterator))')\n  }\n}\n\n/**\n * Extend Promise\n *\n * - Promise.prototype.catch\n * - Promise.resolve\n * - Promise.reject\n * - Promise.all\n * - Promise.race\n *\n * @class Promise\n */\nexport default class Promise extends PromiseBase {\n  /**\n   * Handle exception\n   * @param {function=} fn exception handler\n   */\n  catch (fn) {\n    // teardownDeferThrow(this)\n    return this.then(undefined, fn)\n  }\n\n  /**\n   * @static Promise.resolve\n   * @param {*} v\n   */\n  static resolve (v) {\n    if (v instanceof Promise) return v\n\n    return new Promise((resolve, reject) => {\n      resolve(v)\n    })\n  }\n\n  /**\n   * @static Promise.reject\n   * @param {*} v\n   */\n  static reject (v) {\n    if (v instanceof Promise) return v\n\n    return new Promise((resolve, reject) => {\n      reject(v)\n    })\n  }\n\n  /**\n   * @static Promise.all\n   * @param {Iterable} iterable\n   */\n  static all (iterable) {\n    checkIterable(iterable)\n\n    const { promise, resolve, reject } = defer()\n\n    let count = 0\n    let resolvedCount = 0\n    const values = []\n\n    const checkResolveProxy = idx => value => {\n      resolvedCount++\n      values[idx] = value\n\n      if (resolvedCount >= count) {\n        resolve(values)\n      }\n    }\n\n    for (const item of iterable) {\n      count++\n\n      Promise.resolve(item)\n        .then(checkResolveProxy(count - 1), reject)\n    }\n\n    return promise\n  }\n\n  /**\n   * @static Promise.race\n   * @param {Iterable} iterable\n   */\n  static race (iterable) {\n    checkIterable(iterable)\n\n    const { promise, resolve, reject } = defer()\n\n    for (const item of iterable) {\n      Promise.resolve(item)\n        .then(resolve, reject)\n    }\n\n    return promise\n  }\n}\n\n// Generate `defer` util\nexport const defer = () => {\n  const pending = {}\n\n  pending.promise = new Promise((resolve, reject) => {\n    pending.resolve = resolve\n    pending.reject = reject\n  })\n\n  return pending\n}\n"]}